AWSTemplateFormatVersion: "2010-09-09"
Description:  This template creates the necessary air-gapped Security Gorups within the selected VPC.

Parameters:
  VPCID:
    Description: Name of an existing VPC
    Type: AWS::EC2::VPC::Id
  VpcCidrBlock:
    Description: CIDR block of the VPC
    Type: String
    AllowedPattern: .+

Resources:
  LookupPrefixListFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          import os

          def handler(event, context):
            region = os.environ['AWS_REGION']
            prefix_list_name = f"com.amazonaws.{region}.s3"
            ec2 = boto3.client('ec2')
            try:
              response = ec2.describe_managed_prefix_lists(
                Filters=[
                  {
                    'Name': 'prefix-list-name',
                    'Values': [prefix_list_name]
                  }
                ]
              )
              
              prefix_list_id = response['PrefixLists'][0]['PrefixListId']
              response_data = {'PrefixListId': prefix_list_id}
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
            except Exception as e:
              print(f"Error: {e}")
              cfnresponse.send(event, context, cfnresponse.FAILED, {})
      Runtime: python3.9
      Timeout: 30
      MemorySize: 128

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaVPCEndpointPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeManagedPrefixLists
                Resource: "*"

  S3PrefixListId:
    Type: Custom::LookupPrefixList
    Properties:
      ServiceToken: !GetAtt LookupPrefixListFunction.Arn


  InstanceSecurityGroupS3EgressRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      IpProtocol: "-1"
      DestinationPrefixListId: !GetAtt S3PrefixListId.PrefixListId

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Default Airgapped Bitrise Cloud Controller security group
      VpcId: !Ref VPCID
      Tags: 
        - Key: managed-by-bitrise
          Value: "true"

  InstanceSecurityGroupInterfaceVpcEndpointIngressRule: 
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      IpProtocol: "-1"
      SourceSecurityGroupId: !GetAtt InstanceSecurityGroup.GroupId
  InstanceSecurityGroupLoadBalancerIngressRule: 
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      IpProtocol: "tcp"
      FromPort: 8080
      ToPort: 8080
      SourceSecurityGroupId: 
        Fn::GetAtt:
          - LoadBalancerSecurityGroup
          - GroupId
 
  InstanceSecurityGroupInterfaceVpcEndpointEgressRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      IpProtocol: "-1"
      DestinationSecurityGroupId: !GetAtt InstanceSecurityGroup.GroupId
  InstanceSecurityGroupStagingBitrise1EgressRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      IpProtocol: "tcp"
      FromPort: 443
      ToPort: 443
      CidrIp: "104.18.26.96/32"
  InstanceSecurityGroupStagingBitrise2EgressRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      IpProtocol: "tcp"
      FromPort: 443
      ToPort: 443
      CidrIp: "104.18.27.96/32"
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Default Bitrise Cloud Controller Airgapped LoadBalancer security group
      VpcId: !Ref VPCID
      Tags: 
        - Key: managed-by-bitrise
          Value: "true"
  LoadBalancerSecurityGroupIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      IpProtocol: "tcp"
      FromPort: 8080
      ToPort: 8080
      CidrIp: !Ref VpcCidrBlock
  LoadBalancerSecurityGroupInstanceEgressRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      IpProtocol: "tcp"
      FromPort: 8080
      ToPort: 8080
      DestinationSecurityGroupId: 
        Fn::GetAtt:
          - InstanceSecurityGroup
          - GroupId

Outputs:
  InstanceSg:
    Description: A reference to the Airgapped Intance Security Group
    Value: !Ref InstanceSecurityGroup
    Export:
      Name: bitriseInstanceSecurityGroup
  InstanceSgGroupId:
    Description: A reference to the Intance Security Group GroupId
    Value:
      Fn::GetAtt:
        - InstanceSecurityGroup
        - GroupId
    Export:
      Name: bitriseInstanceSGGroupId
  LoadBalancerSecurityGroup:
    Description: A reference to the Load Balancer Security Group
    Value: !Ref LoadBalancerSecurityGroup
    Export:
      Name: bitriseLoadBalancerSecurityGroup
